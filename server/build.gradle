/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1' // Add the Shadow plugin
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'    
    // Add SLF4J API and Simple implementation
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'org.slf4j:slf4j-simple:2.0.9'
    implementation 'javax.websocket:javax.websocket-api:1.1'
    // Add Tyrus dependencies
    // implementation 'org.glassfish.tyrus:tyrus-server:2.2.0'
    // https://mvnrepository.com/artifact/org.glassfish.tyrus/tyrus-container-grizzly-server
    // implementation 'org.glassfish.tyrus:tyrus-container-grizzly-server:2.2.0'

    // implementation 'org.glassfish.tyrus:tyrus-core:2.2.0'
    // implementation 'org.glassfish.tyrus:tyrus-spi:2.2.0'
    // https://mvnrepository.com/artifact/io.pebbletemplates/pebble
    implementation 'io.pebbletemplates:pebble:3.1.5'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'a.cache.machine.Server'
    }
}

application {
    // Define the main class for the application.
    mainClass = 'a.cache.machine.MainServer'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Configure the Shadow plugin to build a fat JAR
shadowJar {
    archiveClassifier.set('all') // Optional: Adds '-all' to the JAR name
    mergeServiceFiles() // Merges service files if needed
    manifest {
        attributes 'Main-Class': 'a.cache.machine.Server'
    }
}

// Ensure the shadowJar task is run during the build
build {
    dependsOn shadowJar
}