/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // id 'com.github.johnrengelman.shadow' version '8.1.1' // Add the Shadow plugin
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'    
    // Add SLF4J API and Simple implementation
    // implementation 'org.slf4j:slf4j-api:2.0.9'
    // implementation 'org.slf4j:slf4j-simple:2.0.9'
    implementation project(':server') // Add dependency on the server subproject
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'a.cache.machine.Client'
    }
}

application {
    // Define the main class for the application.
    mainClass = 'a.cache.machine.Client'
}

// Task to start the server
// task startServer(type: JavaExec) {
//     group = 'application'
//     description = 'Starts the Redis-like server.'
//     classpath = sourceSets.main.runtimeClasspath
//     mainClass = 'a.cache.machine.Server' // Fully qualified name of the Server class
//     doFirst {
//         println "Starting server..."
//     }
// }

// Task to start the server in a background thread
// task startServer {
//     group = 'application'
//     description = 'Starts the Redis-like server in a background thread.'
//     doLast {
//         println "Starting server in a background thread..."
//         Thread.start {
//             try {
//                 // Use the server subproject's runtime classpath
//                 URLClassLoader classLoader = new URLClassLoader(
//                     configurations.runtimeClasspath.files.collect { it.toURI().toURL() } as URL[],
//                     Thread.currentThread().contextClassLoader
//                 )
//                 // Load the Server class using the custom class loader
//                 Class<?> serverClass = classLoader.loadClass("a.cache.machine.Server")
//                 // Invoke the main method
//                 serverClass.getMethod("main", String[].class).invoke(null, [null] as Object[])
//             } catch (Exception e) {
//                 println "Failed to start server: ${e.message}"
//                 e.printStackTrace()
//             }
//         }
//         // Wait a few seconds to ensure the server is fully started
//         Thread.sleep(5000)
//     }
// }

// Task to stop the server
// task stopServer {
//     group = 'application'
//     description = 'Stops the Redis-like server.'
//     doLast {
//         println "Stopping server..."
//         a.cache.machine.Server.shutdown() // Call the shutdown method
//     }
// }

// Configure the test task
// test {
//     useJUnitPlatform()
//     dependsOn startServer // Start the server before running tests
//     finalizedBy stopServer // Stop the server after tests are complete
// }

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
